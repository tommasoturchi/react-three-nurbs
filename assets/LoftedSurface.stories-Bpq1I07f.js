import{j as e}from"./jsx-runtime-DiklIkkE.js";import{v as C,D as R,C as q,O as T}from"./verb.es-vEISxjAU.js";import{r as p}from"./index-DRjF_FHU.js";import{N as v}from"./NurbsCurve-B3syIbAM.js";const b=({degreeV:t=3,resolutionU:n=20,resolutionV:c=20,color:L="#ff0000",wireframe:A=!1,children:k})=>{const{curveChildren:g,materialChild:w}=p.useMemo(()=>{const d=[];let m=null;return p.Children.forEach(k,r=>{p.isValidElement(r)&&r.type===v?d.push(r):p.isValidElement(r)&&r.type&&r.type.prototype&&"isMaterial"in r.type.prototype&&(m=r)}),{curveChildren:d,materialChild:m}},[k]),i=p.useMemo(()=>{if(g.length<2)return console.error("LoftedSurface requires at least 2 NurbsCurve children"),null;try{const d=g.map(o=>{const{points:s,degree:u=3,weights:l,knots:a}=o.props,y=Array(s.length).fill(1);return C.geom.NurbsCurve.byKnotsControlPointsWeights(u,a,s,l??y)}),m=C.geom.NurbsSurface.byLoftingCurves(d,t),r=[],h=[],x=[];for(let o=0;o<=n;o++)for(let s=0;s<=c;s++){const u=o/n,l=s/c,a=m.point(u,l);r.push(a[0],a[1],a[2]),x.push(u,l)}for(let o=0;o<n;o++)for(let s=0;s<c;s++){const u=o*(c+1)+s,l=u+1,a=(o+1)*(c+1)+s,y=a+1;h.push(u,l,a),h.push(l,y,a)}return{vertices:r,indices:h,uvs:x}}catch(d){return console.error("Error creating lofted surface:",d),null}},[g,t,n,c]);return i?e.jsxs("mesh",{children:[e.jsxs("bufferGeometry",{children:[e.jsx("bufferAttribute",{attach:"attributes-position",count:i.vertices.length/3,array:new Float32Array(i.vertices),itemSize:3}),e.jsx("bufferAttribute",{attach:"attributes-uv",count:i.uvs.length/2,array:new Float32Array(i.uvs),itemSize:2}),e.jsx("bufferAttribute",{attach:"index",count:i.indices.length,array:new Uint32Array(i.indices),itemSize:1})]}),w||e.jsx("meshStandardMaterial",{color:L,wireframe:A,side:R})]}):null};b.__docgenInfo={description:"",methods:[],displayName:"LoftedSurface",props:{degreeV:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"3",computed:!1}},resolutionU:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"20",computed:!1}},resolutionV:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"20",computed:!1}},color:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"#ff0000"',computed:!1}},wireframe:{required:!1,tsType:{name:"boolean"},description:"",defaultValue:{value:"false",computed:!1}},children:{required:!0,tsType:{name:"union",raw:"ReactElement<NurbsCurveProps>[] | ReactElement[]",elements:[{name:"Array",elements:[{name:"ReactElement",elements:[{name:"NurbsCurveProps"}],raw:"ReactElement<NurbsCurveProps>"}],raw:"ReactElement<NurbsCurveProps>[]"},{name:"Array",elements:[{name:"ReactElement"}],raw:"ReactElement[]"}]},description:""}}};const j=[{key:"curve1",points:[[0,0,0],[10,0,0],[40,0,0]],degree:2,knots:[0,0,0,1,1,1],weights:[1,1,1]},{key:"curve2",points:[[0,10,10],[10,5,10],[20,-5,10],[40,10,10]],degree:3,knots:[0,0,0,0,1,1,1,1],weights:[1,1,1,1]},{key:"curve3",points:[[0,0,20],[10,0,20],[20,5,20],[40,0,20]],degree:3,knots:[0,0,0,0,1,1,1,1],weights:[1,1,1,1]},{key:"curve4",points:[[0,3,30],[10,-4,30],[20,10,30],[40,0,30]],degree:3,knots:[0,0,0,0,1,1,1,1],weights:[1,1,1,1]}],W={title:"Components/LoftedSurface",component:b,parameters:{layout:"centered"},tags:["autodocs"],decorators:[t=>e.jsx("div",{style:{width:"100%",height:"100%"},children:e.jsxs(q,{camera:{position:[20,20,20],fov:50},children:[e.jsx("ambientLight",{intensity:.5}),e.jsx("pointLight",{position:[10,10,10]}),e.jsx(t,{}),e.jsx(T,{})]})})]},f={args:{resolutionU:20,resolutionV:20,color:"#ff0000",wireframe:!0,children:j.map(t=>e.jsx(v,{points:t.points,degree:t.degree,knots:t.knots,weights:t.weights},t.key))},render:t=>e.jsxs(e.Fragment,{children:[e.jsx(b,{...t},JSON.stringify(t)),j.map(n=>e.jsx(v,{points:n.points,degree:n.degree,knots:n.knots,weights:n.weights,color:"#00ff00",lineWidth:2},`display-${n.key}`))]})};var E,S,N;f.parameters={...f.parameters,docs:{...(E=f.parameters)==null?void 0:E.docs,source:{originalSource:`{
  args: {
    resolutionU: 20,
    resolutionV: 20,
    color: "#ff0000",
    wireframe: true,
    children: curves.map(curve => <NurbsCurve key={curve.key} points={curve.points} degree={curve.degree} knots={curve.knots} weights={curve.weights} />)
  },
  render: args => <>
      <LoftedSurface key={JSON.stringify(args)} {...args} />
      {curves.map(curve => <NurbsCurve key={\`display-\${curve.key}\`} points={curve.points} degree={curve.degree} knots={curve.knots} weights={curve.weights} color="#00ff00" lineWidth={2} />)}
    </>
}`,...(N=(S=f.parameters)==null?void 0:S.docs)==null?void 0:N.source}}};const _=["ExampleLoft"];export{f as ExampleLoft,_ as __namedExportsOrder,W as default};
