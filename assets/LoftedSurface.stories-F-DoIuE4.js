import{j as e}from"./jsx-runtime-DiklIkkE.js";import{v as w,C as q,O as T}from"./verb.es-vEISxjAU.js";import{r as g}from"./index-DRjF_FHU.js";import{N as h}from"./NurbsCurve-BwaQL-zY.js";const v=({degreeV:r=3,knotsV:o,resolutionU:d=20,resolutionV:c=20,color:A="#ff0000",wireframe:E=!1,children:y})=>{const a=g.useMemo(()=>{const b=g.Children.toArray(y).filter(l=>g.isValidElement(l)&&l.type===h);if(b.length<2)return console.error("LoftedSurface requires at least 2 NurbsCurve children"),null;try{const l=b.map(s=>{const{points:t,degree:i=3,weights:u,knots:n}=s.props,m=Array(t.length).fill(1);return w.geom.NurbsCurve.byKnotsControlPointsWeights(i,n,t,u??m)}),L=w.geom.NurbsSurface.byLoftingCurves(l,r),k=[],f=[],x=[];for(let s=0;s<=d;s++)for(let t=0;t<=c;t++){const i=s/d,u=t/c,n=L.point(i,u);k.push(n[0],n[1],n[2]),x.push(i,u)}for(let s=0;s<d;s++)for(let t=0;t<c;t++){const i=s*(c+1)+t,u=i+1,n=(s+1)*(c+1)+t,m=n+1;f.push(i,u,n),f.push(u,m,n)}return{vertices:k,indices:f,uvs:x}}catch(l){return console.error("Error creating lofted surface:",l),null}},[y,r,o,d,c]);return a?e.jsxs("mesh",{children:[e.jsxs("bufferGeometry",{children:[e.jsx("bufferAttribute",{attach:"attributes-position",count:a.vertices.length/3,array:new Float32Array(a.vertices),itemSize:3}),e.jsx("bufferAttribute",{attach:"attributes-uv",count:a.uvs.length/2,array:new Float32Array(a.uvs),itemSize:2}),e.jsx("bufferAttribute",{attach:"index",count:a.indices.length,array:new Uint32Array(a.indices),itemSize:1})]}),e.jsx("meshStandardMaterial",{color:A,wireframe:E})]}):null};v.__docgenInfo={description:"",methods:[],displayName:"LoftedSurface",props:{degreeV:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"3",computed:!1}},knotsV:{required:!1,tsType:{name:"Array",elements:[{name:"number"}],raw:"number[]"},description:""},resolutionU:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"20",computed:!1}},resolutionV:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"20",computed:!1}},color:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"#ff0000"',computed:!1}},wireframe:{required:!1,tsType:{name:"boolean"},description:"",defaultValue:{value:"false",computed:!1}},children:{required:!0,tsType:{name:"Array",elements:[{name:"ReactElement",elements:[{name:"NurbsCurveProps"}],raw:"ReactElement<NurbsCurveProps>"}],raw:"ReactElement<NurbsCurveProps>[]"},description:""}}};const j=[{key:"curve1",points:[[0,0,0],[10,0,0],[40,0,0]],degree:2,knots:[0,0,0,1,1,1],weights:[1,1,1]},{key:"curve2",points:[[0,10,10],[10,5,10],[20,-5,10],[40,10,10]],degree:3,knots:[0,0,0,0,1,1,1,1],weights:[1,1,1,1]},{key:"curve3",points:[[0,0,20],[10,0,20],[20,5,20],[40,0,20]],degree:3,knots:[0,0,0,0,1,1,1,1],weights:[1,1,1,1]},{key:"curve4",points:[[0,3,30],[10,-4,30],[20,10,30],[40,0,30]],degree:3,knots:[0,0,0,0,1,1,1,1],weights:[1,1,1,1]}],_={title:"Components/LoftedSurface",component:v,parameters:{layout:"centered"},tags:["autodocs"],decorators:[r=>e.jsx("div",{style:{width:"100%",height:"100%"},children:e.jsxs(q,{camera:{position:[20,20,20],fov:50},children:[e.jsx("ambientLight",{intensity:.5}),e.jsx("pointLight",{position:[10,10,10]}),e.jsx(r,{}),e.jsx(T,{})]})})]},p={args:{resolutionU:20,resolutionV:20,color:"#ff0000",wireframe:!0,children:j.map(r=>e.jsx(h,{points:r.points,degree:r.degree,knots:r.knots,weights:r.weights},r.key))},render:r=>e.jsxs(e.Fragment,{children:[e.jsx(v,{...r}),j.map(o=>e.jsx(h,{points:o.points,degree:o.degree,knots:o.knots,weights:o.weights,color:"#00ff00",lineWidth:2},`display-${o.key}`))]})};var C,S,N;p.parameters={...p.parameters,docs:{...(C=p.parameters)==null?void 0:C.docs,source:{originalSource:`{
  args: {
    resolutionU: 20,
    resolutionV: 20,
    color: "#ff0000",
    wireframe: true,
    children: curves.map(curve => <NurbsCurve key={curve.key} points={curve.points} degree={curve.degree} knots={curve.knots} weights={curve.weights} />)
  },
  render: args => <>
      <LoftedSurface {...args} />
      {curves.map(curve => <NurbsCurve key={\`display-\${curve.key}\`} points={curve.points} degree={curve.degree} knots={curve.knots} weights={curve.weights} color="#00ff00" lineWidth={2} />)}
    </>
}`,...(N=(S=p.parameters)==null?void 0:S.docs)==null?void 0:N.source}}};const z=["ExampleLoft"];export{p as ExampleLoft,z as __namedExportsOrder,_ as default};
